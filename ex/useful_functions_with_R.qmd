---
title: "The R-version of what we did in Introduction to useful functions in Excel"
subtitle: "MVEN10"
author: "Ullrika Sahlin"
format: html
editor: visual
---

## Preparations

Load packages

```{r}
#| warning: false
#| message: false

library(readr)
library(dplyr)
library(ggplot2)
```

Load data and save the variable to an object called **x**

```{r}
#| warning: false
#| message: false
 
df = as_tibble(read_csv("../data/breast-cancer.csv"))%>% select(radius_mean)

```

## Descriptive statistics

```{r}
summary(df)
```
```{r}
x = df$radius_mean
quantile(x,probs=0.25)
median(x)
quantile(x,probs=0.95)
mean(x)
sd(x)
min(x)
max(x)
length(x)
```
Calculate the three summary statistics described in the green area of the sheet. 

- The third quartile in the sample, P75

```{r}
quantile(x,probs=0.75)
```

- The 5% quantile (or 5th percentile), P05

```{r}
quantile(x,probs=0.05)
```

- The coefficient of variation is the ratio between the sample standard deviation and the sample mean

```{r}
sd(x)/mean(x)*100
```

## Histogram 

```{r}
hist(x)
```

```{r}
#| message: false
 
df %>% 
  ggplot(aes(x=x))+
  geom_histogram()
```


```{r}
#| message: false
 
df %>% 
  ggplot(aes(x=x))+
  geom_histogram(binwidth = 2.5)
```


```{r}
#| message: false
 
df %>% 
  ggplot(aes(x=x))+
  geom_density()
```


## Probability functions

The probability functions follow the principles of combining p, d, q and r with the name (or short name) of the probability distributions. 

| What to calculate | R-function |
|-------------------|------------|
| CDF               | pnorm      |
| PDF               | dnorm      |
| quantile          | qnorm      |
| random draw       | rnorm      |
: Functions for the normal distribution 


Calculate the probability that a normally distributed variable with mean 14 and standard deviation 3.5 is less than 10

```{r}
pnorm(10,mean=14,sd=3.5)
```

Find the 95% quantile in the same distribution
```{r}
qnorm(0.95,mean=14,sd=3.5)
```

Calculate the probability that an exponentially distributed variable with mean 14 is less than 10
```{r}
pexp(10,rate=1/14)
```

:::{.callout-tip}
Type a question mark before the function to see the help text
?pexp
:::

## Plot probability distributions

```{r}
m=14
s=3.5
data.frame(pp=ppoints(100)) %>%
  mutate(x=qnorm(pp,m,s)) %>%
  mutate(d=dnorm(x,m,s)) %>%
  ggplot(aes(x=x,y=d))+
  geom_line()+
  xlab('value')+
  ylab('density')

```


:::{.callout-warning title="Extra"}
If you feel you have the time or do another time:

Copy the sheet and refine the grid by using pp-values from 0.001 to 0.999. 
:::

```{r}
m=14
s=3.5
data.frame(pp=ppoints(1000)) %>%
  mutate(x=qnorm(pp,m,s)) %>%
  mutate(d=dnorm(x,m,s)) %>%
  ggplot(aes(x=x,y=d))+
  geom_line()+
  xlab('value')+
  ylab('density')

```

## Random sampling


All sample generators start with a random number between 0 and 1. This is also a sample from a uniform distribution. 

```{r}
runif(1)
```

Type a function that generates a uniform random number in the interval 1 to 6. 

```{r}
runif(1,min=1,max=6)
```

A random draw from a probability distribution can be generated by the inverse method. 
- Draws pp-values from a uniform distribution between 0 and 1
- Transform them into quantiles of the target distribution

Generates random draws from a normal distribution using the inverse method

```{r}
qnorm(runif(1),m,s)
```
This is already implemented as a function 
```{r}
rnorm(1,m,s)
```
Draw from a beta distribution with parameters $\alpha=2$ and $\beta=8$

```{r}
rbeta(1,2,8)
```

## Compare descriptive statistics against theoretical values

Wow - now we can generate data where we know the true value on parameters and all theoretical probabilities and quantiles, and compare with what we get when deriving descriptive statistics from the random sample. 

This sheet generates a random sample of size 20 from a beta distribution. 

```{r}
rbeta(n=20,2,8)
```


A beta distribution has two parameters $\alpha$ and $\beta$ 

The expected value of a beta distributed variable is $\frac{\alpha}{\alpha+\beta}$

Compare the calculated sample average to the theoretical expected value 

```{r}
alpha=2
beta=8
alpha/(alpha+beta)
mean(rbeta(n=20,alpha,beta))
```

We can also derive the theoretical quantile, let us say the P95. 

Compare the quantile from the sample with the quantile calculated from the inverse probability distribution function

```{r}
qbeta(0.95,alpha,beta)
quantile(rbeta(n=20,alpha,beta),probs=0.95)
```

- Which of them has the smallest difference? Why do you think it is like that?

:::{.callout-warning title="Extra"}
If you feel you have the time or do another time:

Explore what happens with the difference between theoretical and statistical values when you increase sample size from 20 to a high number (close to 1000)? 
:::

Below I wrte a script where sample size is controlled at one place. The P95 is approximated fairly well by the sampling when I use $n=10 000$.

```{r}
alpha=2
beta=8
n=10000
alpha/(alpha+beta)
mean(rbeta(n=n,alpha,beta))
qbeta(0.95,alpha,beta)
quantile(rbeta(n=n,alpha,beta),probs=0.95)
```

Let us visualise the convergence of the approximation of the mean and 95th percentile of the beta distribution using Monte Carlo simulation. 

The code below defines a function which calculates the mean and P95 after every increase of the sample size and plots the convergence. 

```{r}
plot_conv <- function(n){
sample_mean=cummean(rbeta(n=n,alpha,beta))
sample_P95=unlist(lapply(1:n,function(iter){
  quantile(rbeta(n=iter,alpha,beta),probs=0.95)}))
data.frame(values=c(sample_mean,sample_P95),n=rep(1:n,2), statistic=rep(c("mean","P95"),each=n))  %>%
  ggplot(aes(x=n,y=values,color=statistic))+
  geom_line()+
  geom_hline(yintercept = alpha/(alpha+beta)) +
  geom_hline(yintercept = qbeta(0.95,alpha,beta))
}
```

We start with $n=10$
```{r}
plot_conv(n=10)
```


..increase to $n=100$
```{r}
plot_conv(n=100)
```


..increase to $n=1000$
```{r}
plot_conv(n=10^3)
```

..and finally $n=10000$
```{r}
plot_conv(n=10^4)
```